#!/usr/bin/env node

/* Copyright (c) 2015 - 2017 CoNWeT Lab., Universidad Polit√©cnica de Madrid
 *
 * This file belongs to the Accounting Proxy
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

// Adds a new service; map the public path with the service URL and the application Id.

var util = require('./../util'),
    program = require('commander'),
    config = require('./../config'),
    logger = require('./../log');

var db = require(config.database.type);
var urlRegExp = /(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)(\/|\/([\w#!:.?+=&%@!\-\/]))?/;
var httpMethods = ['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'OPTIONS', 'CONNECT', 'HEAD', 'TRACE'];

var checkHttpMethods = function (methods) {
    var result = true;

    for (var i = 0; i < methods.length && result; i++) {
        if (httpMethods.indexOf(methods[i].toUpperCase()) == -1) {
            result = false;
        }
    }

    return result;
};

program
    .option('-c, --context-broker', 'the service is an Orion Context broker service')
    .description(
        'Adds a new service for monitoring. Binds the public path with the URL specified and the application ID.\n' + 
        '  The public path valid patterns are the followong: \n' +
        '    * /publicPath: only the first part of the path \n' +
        '    * /this/is/the/final/resource/path?color=Blue&shape=rectangular`: the complete resource path (absolute path).\n' +
        '       In this case, the proxy will use this path to make the request. Use this type of public paths to register \n' + 
        '       URLs with query strings. For instance, a public path such as `/public/path` is not valid.')
    .parse(process.argv);

if (program.args.length < 4) {
    logger.error('Invalid number of arguments. Usage: ./cli addService [-c] <publicPath> <URL> <appId> <httpMethod> [otherHttpMethods...]');
    console.log(program.help());

} else {

    var isContextBroker = program.contextBroker !== undefined ? true : false;
    var publicPath = isContextBroker ? program.args[program.args.length-1] : program.args[0];
    var url = isContextBroker ? program.args[0] : program.args[1];
    url = url.replace(/\/$/, ""); // remove trailing slash
    var appId = isContextBroker ? program.args[1] : program.args[2];
    var methods = isContextBroker ? program.args.slice(2, program.args.length-1) : program.args.slice(3);

    util.administrationPath(publicPath, function (adminPath) {

        if (adminPath) {
            logger.error(publicPath + ' is a reserved path.');

        } else if (!util.pathRegExp.test(publicPath)) {
            logger.error(util.invalidPathError);

        } else if (!urlRegExp.test(url)) {
            logger.error('Invalid url format.');

        } else if (!appId) {
            logger.error('Undefined appId');

        } else if (isContextBroker && !config.resources.contextBroker) {
            logger.error('Context Broker is not enabled. Please change the config.resources.contextBroker value to true in config.js');

        } else if (!checkHttpMethods(methods)) {
            logger.error('Http method not valid. Http methods supported: ' + httpMethods);

        } else {

            db.newService(publicPath, url, appId, isContextBroker, methods, function(err) {
                if (err) {
                    logger.error(err);
                } else {
                    logger.info('Service successfully added.');
                }
            });
        }
    });
}
#!/usr/bin/env node

var cli = require('commander'),
    config = require('./config');

var db = require(config.database);

db.init();

cli
    .description('Configuration tool for accounting proxy.')
    .version('0.0.1');


/**
 * Add new service; map the public path with the endpoint url.
 */
cli
    .command('addService [publicPath] [URL]')
    .description('Add new service to proxy database.')
    .action(function(publicPath, url) {
        if (/\/((\w+)\/?)*$/.test(publicPath) &&
            /^(ftp|http|https):\/\/[^ "]+$/.test(url)) {
                db.newService(publicPath, url, function(err) {
                    if (err) {
                        console.log(err);
                    } else {
                        console.log('[LOG] Service successfully added.');
                    }
                });
        }
        else {
            console.log("[ERROR] Invalid parameters.");
        }
    });

/**
 * Return the enpoint url associated with the public path passed.
 */
cli
    .command('getService [publicPath]')
    .description('Get service\'s information.')
    .action(function(publicPath) {
        if (/\/((\w+)\/?)*$/.test(publicPath)){
            db.getService(publicPath, function(err, data) {
                if(err || data === null) {
                    console.log('No service avaliable for path: ' + publicPath);
                } else {
                    console.log("url: " + data['url']);
                }
            });
        } else {
            console.log("[ERROR] Invalid parameters.");
        } 
    });


/**
 * Delete the service associated with the public path passed.
 */
cli
    .command('deleteService [publicPath]')
    .description('Delete a service from proxy database.')
    .action(function(path) {
        if (/\/((\w+)\/?)*$/.test(path)) {
            db.deleteService(path, function(err) {
                if (err) {
                    console.log(err);
                } else {
                    console.log('[LOG] Service ' + path + ' deleted.')
                }
            });
        } else {
            console.log("[ERROR] Invalid parameters.");
        }
    });

cli.parse(process.argv);
#!/usr/bin/env node

var cli = require('commander');
var db = require('./db.js');

cli
    .description('Configuration tool for accounting proxy.')
    .version('0.0.1');

// Add new service command
cli
    .command('addService [path] [port]')
    .description('Add new service to proxy database.')
    .action(function(path, port) {
        if (/\/((\w+)\/?)*$/.test(path) &&
            /^\d*$/.test(port))
            db.newService(path, port, function(err) {
                if (err)
                    console.log(err);
            });
        else {
            console.log("[ERROR] Invalid parameters.");
        }
    });

// Delete service command
cli
    .command('deleteService [path] [port]')
    .description('Delete a service from proxy database.')
    .action(function(path, port) {
        if (/\/((\w+)\/?)*$/.test(path) &&
            /^\d*$/.test(port))
            db.deleteService(path, port, function(err) {
                if (err)
                    console.log(err);
            });
        else {
            console.log("[ERROR] Invalid parameters.");
        }
    });

cli
    .command('getInfo [user]')
    .description('Get user\'s information.')
    .action(function(user) {
        db.getInfo(user, function(err, data) {
            if (err)
                console.log('Error occur in DB.');
            else if (data === undefined)
                console.log('No data avaliable.');
            else {
                console.log("[FORMAT: Organization - Name - Version - API_KEY]");
                for (i in data) {
                    console.log(data[i].organization + " - " +
                                data[i].name + " - " +
                                data[i].version + " - " +
                                data[i].API_KEY);
                }
            }
        });
    });

cli.parse(process.argv);
